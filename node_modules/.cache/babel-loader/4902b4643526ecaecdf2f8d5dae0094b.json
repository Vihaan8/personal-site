{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar tf_1 = require(\"./utils/tf\");\n\nvar canvas_1 = require(\"./utils/canvas\");\n\nvar version_1 = require(\"./version\");\n\nvar DEFAULT_MOBILENET_VERSION = 1;\nvar DEFAULT_TRAINING_LAYER_V1 = 'conv_pw_13_relu';\nvar DEFAULT_TRAINING_LAYER_V2 = \"out_relu\";\nvar DEFAULT_ALPHA_V1 = 0.25;\nvar DEFAULT_ALPHA_V2 = 0.35;\nexports.IMAGE_SIZE = 224;\n/**\n * Receives a Metadata object and fills in the optional fields such as timeStamp\n * @param data a Metadata object\n */\n\nvar fillMetadata = function (data) {\n  // util.assert(typeof data.tfjsVersion === 'string', () => `metadata.tfjsVersion is invalid`);\n  data.packageVersion = data.packageVersion || version_1.version;\n  data.packageName = data.packageName || '@teachablemachine/image';\n  data.timeStamp = data.timeStamp || new Date().toISOString();\n  data.userMetadata = data.userMetadata || {};\n  data.modelName = data.modelName || 'untitled';\n  data.labels = data.labels || [];\n  return data;\n}; // tslint:disable-next-line:no-any\n\n\nvar isMetadata = function (c) {\n  return !!c && Array.isArray(c.labels);\n};\n\nvar isAlphaValid = function (version, alpha) {\n  if (version === 1) {\n    if (alpha !== 0.25 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n      console.warn(\"Invalid alpha. Options are: 0.25, 0.50, 0.75 or 1.00.\");\n      console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V1.toFixed(2));\n      return DEFAULT_ALPHA_V1;\n    }\n  } else {\n    if (alpha !== 0.35 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n      console.warn(\"Invalid alpha. Options are: 0.35, 0.50, 0.75 or 1.00.\");\n      console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V2.toFixed(2));\n      return DEFAULT_ALPHA_V2;\n    }\n  }\n\n  return alpha;\n};\n\nvar parseModelOptions = function (options) {\n  options = options || {};\n\n  if (options.checkpointUrl && options.trainingLayer) {\n    if (options.alpha || options.version) {\n      console.warn(\"Checkpoint URL passed to modelOptions, alpha options are ignored\");\n    }\n\n    return [options.checkpointUrl, options.trainingLayer];\n  } else {\n    options.version = options.version || DEFAULT_MOBILENET_VERSION;\n\n    if (options.version === 1) {\n      options.alpha = options.alpha || DEFAULT_ALPHA_V1;\n      options.alpha = isAlphaValid(options.version, options.alpha);\n      console.log(\"Loading mobilenet \" + options.version + \" and alpha \" + options.alpha); // exception is alpha of 1 can only be 1.0\n\n      var alphaString = options.alpha.toFixed(2);\n\n      if (alphaString === \"1.00\") {\n        alphaString = \"1.0\";\n      }\n\n      return [// tslint:disable-next-line:max-line-length        \n      \"https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_\" + alphaString + \"_\" + exports.IMAGE_SIZE + \"/model.json\", DEFAULT_TRAINING_LAYER_V1];\n    } else if (options.version === 2) {\n      options.alpha = options.alpha || DEFAULT_ALPHA_V2;\n      options.alpha = isAlphaValid(options.version, options.alpha);\n      console.log(\"Loading mobilenet \" + options.version + \" and alpha \" + options.alpha);\n      return [// tslint:disable-next-line:max-line-length        \n      \"https://storage.googleapis.com/teachable-machine-models/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_\" + options.alpha.toFixed(2) + \"_\" + exports.IMAGE_SIZE + \"_no_top/model.json\", DEFAULT_TRAINING_LAYER_V2];\n    } else {\n      throw new Error(\"MobileNet V\" + options.version + \" doesn't exist\");\n    }\n  }\n};\n/**\n * process either a URL string or a Metadata object\n * @param metadata a url to load metadata or a Metadata object\n */\n\n\nvar processMetadata = function (metadata) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var metadataJSON, metadataResponse;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(typeof metadata === 'string')) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , fetch(metadata)];\n\n        case 1:\n          metadataResponse = _a.sent();\n          return [4\n          /*yield*/\n          , metadataResponse.json()];\n\n        case 2:\n          metadataJSON = _a.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          if (isMetadata(metadata)) {\n            metadataJSON = metadata;\n          } else {\n            throw new Error('Invalid Metadata provided');\n          }\n\n          _a.label = 4;\n\n        case 4:\n          return [2\n          /*return*/\n          , fillMetadata(metadataJSON)];\n      }\n    });\n  });\n};\n/**\n * Computes the probabilities of the topK classes given logits by computing\n * softmax to get probabilities and then sorting the probabilities.\n * @param logits Tensor representing the logits from MobileNet.\n * @param topK The number of top predictions to show.\n */\n\n\nfunction getTopKClasses(labels, logits, topK) {\n  if (topK === void 0) {\n    topK = 3;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var values;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , logits.data()];\n\n        case 1:\n          values = _a.sent();\n          return [2\n          /*return*/\n          , tf.tidy(function () {\n            topK = Math.min(topK, values.length);\n            var valuesAndIndices = [];\n\n            for (var i = 0; i < values.length; i++) {\n              valuesAndIndices.push({\n                value: values[i],\n                index: i\n              });\n            }\n\n            valuesAndIndices.sort(function (a, b) {\n              return b.value - a.value;\n            });\n            var topkValues = new Float32Array(topK);\n            var topkIndices = new Int32Array(topK);\n\n            for (var i = 0; i < topK; i++) {\n              topkValues[i] = valuesAndIndices[i].value;\n              topkIndices[i] = valuesAndIndices[i].index;\n            }\n\n            var topClassesAndProbs = [];\n\n            for (var i = 0; i < topkIndices.length; i++) {\n              topClassesAndProbs.push({\n                className: labels[topkIndices[i]],\n                probability: topkValues[i]\n              });\n            }\n\n            return topClassesAndProbs;\n          })];\n      }\n    });\n  });\n}\n\nexports.getTopKClasses = getTopKClasses;\n\nvar CustomMobileNet =\n/** @class */\nfunction () {\n  function CustomMobileNet(model, metadata) {\n    this.model = model;\n    this._metadata = fillMetadata(metadata);\n  }\n\n  Object.defineProperty(CustomMobileNet, \"EXPECTED_IMAGE_SIZE\", {\n    get: function () {\n      return exports.IMAGE_SIZE;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CustomMobileNet.prototype.getMetadata = function () {\n    return this._metadata;\n  };\n  /**\n   * get the total number of classes existing within model\n   */\n\n\n  CustomMobileNet.prototype.getTotalClasses = function () {\n    var output = this.model.output;\n    var totalClasses = output.shape[1];\n    return totalClasses;\n  };\n  /**\n   * get the model labels\n   */\n\n\n  CustomMobileNet.prototype.getClassLabels = function () {\n    return this._metadata.labels;\n  };\n  /**\n   * Given an image element, makes a prediction through mobilenet returning the\n   * probabilities of the top K classes.\n   * @param image the image to classify\n   * @param maxPredictions the maximum number of classification predictions\n   */\n\n\n  CustomMobileNet.prototype.predictTopK = function (image, maxPredictions, flipped) {\n    if (maxPredictions === void 0) {\n      maxPredictions = 10;\n    }\n\n    if (flipped === void 0) {\n      flipped = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var croppedImage, logits, classes;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            croppedImage = canvas_1.cropTo(image, exports.IMAGE_SIZE, flipped);\n            logits = tf.tidy(function () {\n              var captured = tf_1.capture(croppedImage);\n              return _this.model.predict(captured);\n            });\n            return [4\n            /*yield*/\n            , getTopKClasses(this._metadata.labels, logits, maxPredictions)];\n\n          case 1:\n            classes = _a.sent();\n            tfjs_1.dispose(logits);\n            return [2\n            /*return*/\n            , classes];\n        }\n      });\n    });\n  };\n  /**\n   * Given an image element, makes a prediction through mobilenet returning the\n   * probabilities for ALL classes.\n   * @param image the image to classify\n   * @param flipped whether to flip the image on X\n   */\n\n\n  CustomMobileNet.prototype.predict = function (image, flipped) {\n    if (flipped === void 0) {\n      flipped = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var croppedImage, logits, values, classes, i;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            croppedImage = canvas_1.cropTo(image, exports.IMAGE_SIZE, flipped);\n            logits = tf.tidy(function () {\n              var captured = tf_1.capture(croppedImage);\n              return _this.model.predict(captured);\n            });\n            return [4\n            /*yield*/\n            , logits.data()];\n\n          case 1:\n            values = _a.sent();\n            classes = [];\n\n            for (i = 0; i < values.length; i++) {\n              classes.push({\n                className: this._metadata.labels[i],\n                probability: values[i]\n              });\n            }\n\n            tfjs_1.dispose(logits);\n            return [2\n            /*return*/\n            , classes];\n        }\n      });\n    });\n  };\n\n  CustomMobileNet.prototype.dispose = function () {\n    this.truncatedModel.dispose();\n  };\n\n  return CustomMobileNet;\n}();\n\nexports.CustomMobileNet = CustomMobileNet;\n/**\n * load the base mobilenet model\n * @param modelOptions options determining what model to load\n */\n\nfunction loadTruncatedMobileNet(modelOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, checkpointUrl, trainingLayer, mobilenet, layer, truncatedModel, model, layer, truncatedModel, model;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _a = parseModelOptions(modelOptions), checkpointUrl = _a[0], trainingLayer = _a[1];\n          return [4\n          /*yield*/\n          , tf.loadLayersModel(checkpointUrl)];\n\n        case 1:\n          mobilenet = _b.sent();\n\n          if (modelOptions && modelOptions.version === 1) {\n            layer = mobilenet.getLayer(trainingLayer);\n            truncatedModel = tf.model({\n              inputs: mobilenet.inputs,\n              outputs: layer.output\n            });\n            model = tf.sequential();\n            model.add(truncatedModel);\n            model.add(tf.layers.flatten());\n            return [2\n            /*return*/\n            , model];\n          } else {\n            layer = mobilenet.getLayer(trainingLayer);\n            truncatedModel = tf.model({\n              inputs: mobilenet.inputs,\n              outputs: layer.output\n            });\n            model = tf.sequential();\n            model.add(truncatedModel);\n            model.add(tf.layers.globalAveragePooling2d({})); // go from shape [7, 7, 1280] to [1280]\n\n            return [2\n            /*return*/\n            , model];\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nexports.loadTruncatedMobileNet = loadTruncatedMobileNet;\n\nfunction load(model, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var customModel, metadataJSON, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , tf.loadLayersModel(model)];\n\n        case 1:\n          customModel = _b.sent();\n          if (!metadata) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , processMetadata(metadata)];\n\n        case 2:\n          _a = _b.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          _a = null;\n          _b.label = 4;\n\n        case 4:\n          metadataJSON = _a;\n          return [2\n          /*return*/\n          , new CustomMobileNet(customModel, metadataJSON)];\n      }\n    });\n  });\n}\n\nexports.load = load;\n\nfunction loadFromFiles(model, weights, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var customModel, metadataFile, metadataJSON, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , tf.loadLayersModel(tf.io.browserFiles([model, weights]))];\n\n        case 1:\n          customModel = _b.sent();\n          return [4\n          /*yield*/\n          , new Response(metadata).json()];\n\n        case 2:\n          metadataFile = _b.sent();\n          if (!metadata) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , processMetadata(metadataFile)];\n\n        case 3:\n          _a = _b.sent();\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          _a = null;\n          _b.label = 5;\n\n        case 5:\n          metadataJSON = _a;\n          return [2\n          /*return*/\n          , new CustomMobileNet(customModel, metadataJSON)];\n      }\n    });\n  });\n}\n\nexports.loadFromFiles = loadFromFiles;","map":{"version":3,"sources":["../src/custom-mobilenet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar tf_1 = require(\"./utils/tf\");\nvar canvas_1 = require(\"./utils/canvas\");\nvar version_1 = require(\"./version\");\nvar DEFAULT_MOBILENET_VERSION = 1;\nvar DEFAULT_TRAINING_LAYER_V1 = 'conv_pw_13_relu';\nvar DEFAULT_TRAINING_LAYER_V2 = \"out_relu\";\nvar DEFAULT_ALPHA_V1 = 0.25;\nvar DEFAULT_ALPHA_V2 = 0.35;\nexports.IMAGE_SIZE = 224;\n/**\n * Receives a Metadata object and fills in the optional fields such as timeStamp\n * @param data a Metadata object\n */\nvar fillMetadata = function (data) {\n    // util.assert(typeof data.tfjsVersion === 'string', () => `metadata.tfjsVersion is invalid`);\n    data.packageVersion = data.packageVersion || version_1.version;\n    data.packageName = data.packageName || '@teachablemachine/image';\n    data.timeStamp = data.timeStamp || new Date().toISOString();\n    data.userMetadata = data.userMetadata || {};\n    data.modelName = data.modelName || 'untitled';\n    data.labels = data.labels || [];\n    return data;\n};\n// tslint:disable-next-line:no-any\nvar isMetadata = function (c) {\n    return !!c && Array.isArray(c.labels);\n};\nvar isAlphaValid = function (version, alpha) {\n    if (version === 1) {\n        if (alpha !== 0.25 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.25, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V1.toFixed(2));\n            return DEFAULT_ALPHA_V1;\n        }\n    }\n    else {\n        if (alpha !== 0.35 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.35, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V2.toFixed(2));\n            return DEFAULT_ALPHA_V2;\n        }\n    }\n    return alpha;\n};\nvar parseModelOptions = function (options) {\n    options = options || {};\n    if (options.checkpointUrl && options.trainingLayer) {\n        if (options.alpha || options.version) {\n            console.warn(\"Checkpoint URL passed to modelOptions, alpha options are ignored\");\n        }\n        return [options.checkpointUrl, options.trainingLayer];\n    }\n    else {\n        options.version = options.version || DEFAULT_MOBILENET_VERSION;\n        if (options.version === 1) {\n            options.alpha = options.alpha || DEFAULT_ALPHA_V1;\n            options.alpha = isAlphaValid(options.version, options.alpha);\n            console.log(\"Loading mobilenet \" + options.version + \" and alpha \" + options.alpha);\n            // exception is alpha of 1 can only be 1.0\n            var alphaString = options.alpha.toFixed(2);\n            if (alphaString === \"1.00\") {\n                alphaString = \"1.0\";\n            }\n            return [\n                // tslint:disable-next-line:max-line-length        \n                \"https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_\" + alphaString + \"_\" + exports.IMAGE_SIZE + \"/model.json\",\n                DEFAULT_TRAINING_LAYER_V1\n            ];\n        }\n        else if (options.version === 2) {\n            options.alpha = options.alpha || DEFAULT_ALPHA_V2;\n            options.alpha = isAlphaValid(options.version, options.alpha);\n            console.log(\"Loading mobilenet \" + options.version + \" and alpha \" + options.alpha);\n            return [\n                // tslint:disable-next-line:max-line-length        \n                \"https://storage.googleapis.com/teachable-machine-models/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_\" + options.alpha.toFixed(2) + \"_\" + exports.IMAGE_SIZE + \"_no_top/model.json\",\n                DEFAULT_TRAINING_LAYER_V2\n            ];\n        }\n        else {\n            throw new Error(\"MobileNet V\" + options.version + \" doesn't exist\");\n        }\n    }\n};\n/**\n * process either a URL string or a Metadata object\n * @param metadata a url to load metadata or a Metadata object\n */\nvar processMetadata = function (metadata) { return __awaiter(void 0, void 0, void 0, function () {\n    var metadataJSON, metadataResponse;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (!(typeof metadata === 'string')) return [3 /*break*/, 3];\n                return [4 /*yield*/, fetch(metadata)];\n            case 1:\n                metadataResponse = _a.sent();\n                return [4 /*yield*/, metadataResponse.json()];\n            case 2:\n                metadataJSON = _a.sent();\n                return [3 /*break*/, 4];\n            case 3:\n                if (isMetadata(metadata)) {\n                    metadataJSON = metadata;\n                }\n                else {\n                    throw new Error('Invalid Metadata provided');\n                }\n                _a.label = 4;\n            case 4: return [2 /*return*/, fillMetadata(metadataJSON)];\n        }\n    });\n}); };\n/**\n * Computes the probabilities of the topK classes given logits by computing\n * softmax to get probabilities and then sorting the probabilities.\n * @param logits Tensor representing the logits from MobileNet.\n * @param topK The number of top predictions to show.\n */\nfunction getTopKClasses(labels, logits, topK) {\n    if (topK === void 0) { topK = 3; }\n    return __awaiter(this, void 0, void 0, function () {\n        var values;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, logits.data()];\n                case 1:\n                    values = _a.sent();\n                    return [2 /*return*/, tf.tidy(function () {\n                            topK = Math.min(topK, values.length);\n                            var valuesAndIndices = [];\n                            for (var i = 0; i < values.length; i++) {\n                                valuesAndIndices.push({ value: values[i], index: i });\n                            }\n                            valuesAndIndices.sort(function (a, b) {\n                                return b.value - a.value;\n                            });\n                            var topkValues = new Float32Array(topK);\n                            var topkIndices = new Int32Array(topK);\n                            for (var i = 0; i < topK; i++) {\n                                topkValues[i] = valuesAndIndices[i].value;\n                                topkIndices[i] = valuesAndIndices[i].index;\n                            }\n                            var topClassesAndProbs = [];\n                            for (var i = 0; i < topkIndices.length; i++) {\n                                topClassesAndProbs.push({\n                                    className: labels[topkIndices[i]],\n                                    probability: topkValues[i]\n                                });\n                            }\n                            return topClassesAndProbs;\n                        })];\n            }\n        });\n    });\n}\nexports.getTopKClasses = getTopKClasses;\nvar CustomMobileNet = /** @class */ (function () {\n    function CustomMobileNet(model, metadata) {\n        this.model = model;\n        this._metadata = fillMetadata(metadata);\n    }\n    Object.defineProperty(CustomMobileNet, \"EXPECTED_IMAGE_SIZE\", {\n        get: function () {\n            return exports.IMAGE_SIZE;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CustomMobileNet.prototype.getMetadata = function () {\n        return this._metadata;\n    };\n    /**\n     * get the total number of classes existing within model\n     */\n    CustomMobileNet.prototype.getTotalClasses = function () {\n        var output = this.model.output;\n        var totalClasses = output.shape[1];\n        return totalClasses;\n    };\n    /**\n     * get the model labels\n     */\n    CustomMobileNet.prototype.getClassLabels = function () {\n        return this._metadata.labels;\n    };\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities of the top K classes.\n     * @param image the image to classify\n     * @param maxPredictions the maximum number of classification predictions\n     */\n    CustomMobileNet.prototype.predictTopK = function (image, maxPredictions, flipped) {\n        if (maxPredictions === void 0) { maxPredictions = 10; }\n        if (flipped === void 0) { flipped = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var croppedImage, logits, classes;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        croppedImage = canvas_1.cropTo(image, exports.IMAGE_SIZE, flipped);\n                        logits = tf.tidy(function () {\n                            var captured = tf_1.capture(croppedImage);\n                            return _this.model.predict(captured);\n                        });\n                        return [4 /*yield*/, getTopKClasses(this._metadata.labels, logits, maxPredictions)];\n                    case 1:\n                        classes = _a.sent();\n                        tfjs_1.dispose(logits);\n                        return [2 /*return*/, classes];\n                }\n            });\n        });\n    };\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities for ALL classes.\n     * @param image the image to classify\n     * @param flipped whether to flip the image on X\n     */\n    CustomMobileNet.prototype.predict = function (image, flipped) {\n        if (flipped === void 0) { flipped = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var croppedImage, logits, values, classes, i;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        croppedImage = canvas_1.cropTo(image, exports.IMAGE_SIZE, flipped);\n                        logits = tf.tidy(function () {\n                            var captured = tf_1.capture(croppedImage);\n                            return _this.model.predict(captured);\n                        });\n                        return [4 /*yield*/, logits.data()];\n                    case 1:\n                        values = _a.sent();\n                        classes = [];\n                        for (i = 0; i < values.length; i++) {\n                            classes.push({\n                                className: this._metadata.labels[i],\n                                probability: values[i]\n                            });\n                        }\n                        tfjs_1.dispose(logits);\n                        return [2 /*return*/, classes];\n                }\n            });\n        });\n    };\n    CustomMobileNet.prototype.dispose = function () {\n        this.truncatedModel.dispose();\n    };\n    return CustomMobileNet;\n}());\nexports.CustomMobileNet = CustomMobileNet;\n/**\n * load the base mobilenet model\n * @param modelOptions options determining what model to load\n */\nfunction loadTruncatedMobileNet(modelOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n        var _a, checkpointUrl, trainingLayer, mobilenet, layer, truncatedModel, model, layer, truncatedModel, model;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = parseModelOptions(modelOptions), checkpointUrl = _a[0], trainingLayer = _a[1];\n                    return [4 /*yield*/, tf.loadLayersModel(checkpointUrl)];\n                case 1:\n                    mobilenet = _b.sent();\n                    if (modelOptions && modelOptions.version === 1) {\n                        layer = mobilenet.getLayer(trainingLayer);\n                        truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n                        model = tf.sequential();\n                        model.add(truncatedModel);\n                        model.add(tf.layers.flatten());\n                        return [2 /*return*/, model];\n                    }\n                    else {\n                        layer = mobilenet.getLayer(trainingLayer);\n                        truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n                        model = tf.sequential();\n                        model.add(truncatedModel);\n                        model.add(tf.layers.globalAveragePooling2d({})); // go from shape [7, 7, 1280] to [1280]\n                        return [2 /*return*/, model];\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.loadTruncatedMobileNet = loadTruncatedMobileNet;\nfunction load(model, metadata) {\n    return __awaiter(this, void 0, void 0, function () {\n        var customModel, metadataJSON, _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, tf.loadLayersModel(model)];\n                case 1:\n                    customModel = _b.sent();\n                    if (!metadata) return [3 /*break*/, 3];\n                    return [4 /*yield*/, processMetadata(metadata)];\n                case 2:\n                    _a = _b.sent();\n                    return [3 /*break*/, 4];\n                case 3:\n                    _a = null;\n                    _b.label = 4;\n                case 4:\n                    metadataJSON = _a;\n                    return [2 /*return*/, new CustomMobileNet(customModel, metadataJSON)];\n            }\n        });\n    });\n}\nexports.load = load;\nfunction loadFromFiles(model, weights, metadata) {\n    return __awaiter(this, void 0, void 0, function () {\n        var customModel, metadataFile, metadataJSON, _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, tf.loadLayersModel(tf.io.browserFiles([model, weights]))];\n                case 1:\n                    customModel = _b.sent();\n                    return [4 /*yield*/, new Response(metadata).json()];\n                case 2:\n                    metadataFile = _b.sent();\n                    if (!metadata) return [3 /*break*/, 4];\n                    return [4 /*yield*/, processMetadata(metadataFile)];\n                case 3:\n                    _a = _b.sent();\n                    return [3 /*break*/, 5];\n                case 4:\n                    _a = null;\n                    _b.label = 5;\n                case 5:\n                    metadataJSON = _a;\n                    return [2 /*return*/, new CustomMobileNet(customModel, metadataJSON)];\n            }\n        });\n    });\n}\nexports.loadFromFiles = loadFromFiles;\n//# sourceMappingURL=custom-mobilenet.js.map"]},"metadata":{},"sourceType":"script"}