{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar tf_1 = require(\"./utils/tf\");\n\nvar custom_mobilenet_1 = require(\"./custom-mobilenet\");\n\nvar seedrandom = require(\"seedrandom\");\n\nvar VALIDATION_FRACTION = 0.15; // tslint:disable-next-line:no-any\n\nvar isTensor = function (c) {\n  return typeof c.dataId === 'object' && c.shape === 'object';\n};\n/**\n * Converts an integer into its one-hot representation and returns\n * the data as a JS Array.\n */\n\n\nfunction flatOneHot(label, numClasses) {\n  var labelOneHot = new Array(numClasses).fill(0);\n  labelOneHot[label] = 1;\n  return labelOneHot;\n}\n/**\n * Shuffle an array of Float32Array or Samples using Fisher-Yates algorithm\n * Takes an optional seed value to make shuffling predictable\n */\n\n\nfunction fisherYates(array, seed) {\n  var _a;\n\n  var length = array.length; // need to clone array or we'd be editing original as we goo\n\n  var shuffled = array.slice();\n\n  for (var i = length - 1; i > 0; i -= 1) {\n    var randomIndex = void 0;\n\n    if (seed) {\n      randomIndex = Math.floor(seed() * (i + 1));\n    } else {\n      randomIndex = Math.floor(Math.random() * (i + 1));\n    }\n\n    _a = [shuffled[randomIndex], shuffled[i]], shuffled[i] = _a[0], shuffled[randomIndex] = _a[1];\n  }\n\n  return shuffled;\n}\n\nvar TeachableMobileNet =\n/** @class */\nfunction (_super) {\n  __extends(TeachableMobileNet, _super);\n\n  function TeachableMobileNet(truncated, metadata) {\n    var _this = _super.call(this, tf.sequential(), metadata) || this; // private __stopTrainingReject: (error: Error) => void;\n    // Number of total samples\n\n\n    _this.totalSamples = 0; // Array of all the examples collected\n\n    _this.examples = []; // the provided model is the truncated mobilenet\n\n    _this.truncatedModel = truncated;\n    return _this;\n  }\n\n  Object.defineProperty(TeachableMobileNet.prototype, \"asSequentialModel\", {\n    get: function () {\n      return this.model;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TeachableMobileNet.prototype, \"isTrained\", {\n    /**\n     * has the teachable model been trained?\n     */\n    get: function () {\n      return !!this.model && this.model.layers && this.model.layers.length > 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TeachableMobileNet.prototype, \"isPrepared\", {\n    /**\n     * has the dataset been prepared with all labels and samples processed?\n     */\n    get: function () {\n      return !!this.trainDataset;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TeachableMobileNet.prototype, \"numClasses\", {\n    /**\n     * how many classes are in the dataset?\n     */\n    get: function () {\n      return this._metadata.labels.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Add a sample of data under the provided className\n   * @param className the classification this example belongs to\n   * @param sample the image / tensor that belongs in this classification\n   */\n  // public async addExample(className: number, sample: HTMLCanvasElement | tf.Tensor) {\n\n  TeachableMobileNet.prototype.addExample = function (className, sample) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cap, example, activation;\n      return __generator(this, function (_a) {\n        cap = isTensor(sample) ? sample : tf_1.capture(sample);\n        example = this.truncatedModel.predict(cap);\n        activation = example.dataSync();\n        cap.dispose();\n        example.dispose(); // save samples of each class separately\n\n        this.examples[className].push(activation); // increase our sample counter\n\n        this.totalSamples++;\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Classify an input image / Tensor with your trained model. Return all results.\n   * @param image the input image / Tensor to classify against your model\n   * @param topK how many of the top results do you want? defautls to 3\n   */\n\n\n  TeachableMobileNet.prototype.predict = function (image, flipped) {\n    if (flipped === void 0) {\n      flipped = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.model) {\n          throw new Error('Model has not been trained yet, called train() first');\n        }\n\n        return [2\n        /*return*/\n        , _super.prototype.predict.call(this, image, flipped)];\n      });\n    });\n  };\n  /**\n   * Classify an input image / Tensor with your trained model. Return topK results\n   * @param image the input image / Tensor to classify against your model\n   * @param maxPredictions how many of the top results do you want? defautls to 3\n   * @param flipped whether to flip an image\n   */\n\n\n  TeachableMobileNet.prototype.predictTopK = function (image, maxPredictions, flipped) {\n    if (maxPredictions === void 0) {\n      maxPredictions = 10;\n    }\n\n    if (flipped === void 0) {\n      flipped = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.model) {\n          throw new Error('Model has not been trained yet, called train() first');\n        }\n\n        return [2\n        /*return*/\n        , _super.prototype.predictTopK.call(this, image, maxPredictions, flipped)];\n      });\n    });\n  };\n  /**\n   * process the current examples provided to calculate labels and format\n   * into proper tf.data.Dataset\n   */\n\n\n  TeachableMobileNet.prototype.prepare = function () {\n    for (var classes in this.examples) {\n      if (classes.length === 0) {\n        throw new Error('Add some examples before training');\n      }\n    }\n\n    var datasets = this.convertToTfDataset();\n    this.trainDataset = datasets.trainDataset;\n    this.validationDataset = datasets.validationDataset;\n  };\n  /**\n   * Process the examples by first shuffling randomly per class, then adding\n   * one-hot labels, then splitting into training/validation datsets, and finally\n   * sorting one last time\n   */\n\n\n  TeachableMobileNet.prototype.convertToTfDataset = function () {\n    // first shuffle each class individually\n    // TODO: we could basically replicate this by insterting randomly\n    for (var i = 0; i < this.examples.length; i++) {\n      this.examples[i] = fisherYates(this.examples[i], this.seed);\n    } // then break into validation and test datasets\n\n\n    var trainDataset = [];\n    var validationDataset = [];\n\n    var _loop_1 = function (i) {\n      var y = flatOneHot(i, this_1.numClasses);\n      var classLength = this_1.examples[i].length;\n      var numValidation = Math.ceil(VALIDATION_FRACTION * classLength);\n      var numTrain = classLength - numValidation;\n      var classTrain = this_1.examples[i].slice(0, numTrain).map(function (dataArray) {\n        return {\n          data: dataArray,\n          label: y\n        };\n      });\n      var classValidation = this_1.examples[i].slice(numTrain).map(function (dataArray) {\n        return {\n          data: dataArray,\n          label: y\n        };\n      });\n      trainDataset = trainDataset.concat(classTrain);\n      validationDataset = validationDataset.concat(classValidation);\n    };\n\n    var this_1 = this; // for each class, add samples to train and validation dataset\n\n    for (var i = 0; i < this.examples.length; i++) {\n      _loop_1(i);\n    } // finally shuffle both train and validation datasets\n\n\n    trainDataset = fisherYates(trainDataset, this.seed);\n    validationDataset = fisherYates(validationDataset, this.seed);\n    var trainX = tf.data.array(trainDataset.map(function (sample) {\n      return sample.data;\n    }));\n    var validationX = tf.data.array(validationDataset.map(function (sample) {\n      return sample.data;\n    }));\n    var trainY = tf.data.array(trainDataset.map(function (sample) {\n      return sample.label;\n    }));\n    var validationY = tf.data.array(validationDataset.map(function (sample) {\n      return sample.label;\n    })); // return tf.data dataset objects\n\n    return {\n      trainDataset: tf.data.zip({\n        xs: trainX,\n        ys: trainY\n      }),\n      validationDataset: tf.data.zip({\n        xs: validationX,\n        ys: validationY\n      })\n    };\n  };\n  /**\n   * Saving `model`'s topology and weights as two files\n   * (`my-model-1.json` and `my-model-1.weights.bin`) as well as\n   * a `metadata.json` file containing metadata such as text labels to be\n   * downloaded from browser.\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n\n\n  TeachableMobileNet.prototype.save = function (handlerOrURL, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.model.save(handlerOrURL, config)];\n      });\n    });\n  };\n  /**\n   * Train your data into a new model and join it with mobilenet\n   * @param params the parameters for the model / training\n   * @param callbacks provide callbacks to receive training events\n   */\n\n\n  TeachableMobileNet.prototype.train = function (params, callbacks) {\n    if (callbacks === void 0) {\n      callbacks = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var originalOnTrainEnd, numLabels, inputShape, inputSize, varianceScaling, optimizer, trainData, validationData, history, jointModel;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            originalOnTrainEnd = callbacks.onTrainEnd || function () {};\n\n            callbacks.onTrainEnd = function (logs) {\n              if (_this.__stopTrainingResolve) {\n                _this.__stopTrainingResolve();\n\n                _this.__stopTrainingResolve = null;\n              }\n\n              originalOnTrainEnd(logs);\n            }; // Rest of trian function\n\n\n            if (!this.isPrepared) {\n              this.prepare();\n            }\n\n            numLabels = this.getLabels().length;\n            tfjs_1.util.assert(numLabels === this.numClasses, function () {\n              return \"Can not train, has \" + numLabels + \" labels and \" + _this.numClasses + \" classes\";\n            });\n            inputShape = this.truncatedModel.outputs[0].shape.slice(1);\n            inputSize = tf.util.sizeFromShape(inputShape);\n\n            if (this.seed) {\n              varianceScaling = tf.initializers.varianceScaling({\n                seed: 3.14\n              });\n            } else {\n              varianceScaling = tf.initializers.varianceScaling({});\n            }\n\n            this.trainingModel = tf.sequential({\n              layers: [tf.layers.dense({\n                inputShape: [inputSize],\n                units: params.denseUnits,\n                activation: 'relu',\n                kernelInitializer: varianceScaling,\n                useBias: true\n              }), tf.layers.dense({\n                kernelInitializer: varianceScaling,\n                useBias: false,\n                activation: 'softmax',\n                units: this.numClasses\n              })]\n            });\n            optimizer = tf.train.adam(params.learningRate); // const optimizer = tf.train.rmsprop(params.learningRate);\n\n            this.trainingModel.compile({\n              optimizer: optimizer,\n              // loss: 'binaryCrossentropy',\n              loss: 'categoricalCrossentropy',\n              metrics: ['accuracy']\n            });\n\n            if (!(params.batchSize > 0)) {\n              throw new Error(\"Batch size is 0 or NaN. Please choose a non-zero fraction\");\n            }\n\n            trainData = this.trainDataset.batch(params.batchSize);\n            validationData = this.validationDataset.batch(params.batchSize);\n            return [4\n            /*yield*/\n            , this.trainingModel.fitDataset(trainData, {\n              epochs: params.epochs,\n              validationData: validationData,\n              callbacks: callbacks\n            })];\n\n          case 1:\n            history = _a.sent();\n            jointModel = tf.sequential();\n            jointModel.add(this.truncatedModel);\n            jointModel.add(this.trainingModel);\n            this.model = jointModel;\n            optimizer.dispose(); // cleanup of memory\n\n            return [2\n            /*return*/\n            , this.model];\n        }\n      });\n    });\n  };\n  /*\n   * Setup the exampls array to hold samples per class\n   */\n\n\n  TeachableMobileNet.prototype.prepareDataset = function () {\n    for (var i = 0; i < this.numClasses; i++) {\n      this.examples[i] = [];\n    }\n  };\n\n  TeachableMobileNet.prototype.setLabel = function (index, label) {\n    this._metadata.labels[index] = label;\n  };\n\n  TeachableMobileNet.prototype.setLabels = function (labels) {\n    this._metadata.labels = labels;\n    this.prepareDataset();\n  };\n\n  TeachableMobileNet.prototype.getLabel = function (index) {\n    return this._metadata.labels[index];\n  };\n\n  TeachableMobileNet.prototype.getLabels = function () {\n    return this._metadata.labels;\n  };\n\n  TeachableMobileNet.prototype.setName = function (name) {\n    this._metadata.modelName = name;\n  };\n\n  TeachableMobileNet.prototype.getName = function () {\n    return this._metadata.modelName;\n  };\n\n  TeachableMobileNet.prototype.stopTraining = function () {\n    var _this = this;\n\n    var promise = new Promise(function (resolve, reject) {\n      _this.trainingModel.stopTraining = true;\n      _this.__stopTrainingResolve = resolve; // this.__stopTrainingReject = reject;\n    });\n    return promise;\n  };\n\n  TeachableMobileNet.prototype.dispose = function () {\n    this.trainingModel.dispose();\n\n    _super.prototype.dispose.call(this);\n  };\n  /*\n   * Calculate each class accuracy using the validation dataset\n   */\n\n\n  TeachableMobileNet.prototype.calculateAccuracyPerClass = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var validationXs, validationYs, batchSize, iterations, batchesX, batchesY, itX, itY, allX, allY, i, batchedXTensor, batchedXPredictionTensor, argMaxX, batchedYTensor, argMaxY, reference, predictions, i;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            validationXs = this.validationDataset.mapAsync(function (dataset) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  return [2\n                  /*return*/\n                  , dataset.xs];\n                });\n              });\n            });\n            validationYs = this.validationDataset.mapAsync(function (dataset) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  return [2\n                  /*return*/\n                  , dataset.ys];\n                });\n              });\n            });\n            batchSize = Math.min(validationYs.size, 32);\n            iterations = Math.ceil(validationYs.size / batchSize);\n            batchesX = validationXs.batch(batchSize);\n            batchesY = validationYs.batch(batchSize);\n            return [4\n            /*yield*/\n            , batchesX.iterator()];\n\n          case 1:\n            itX = _a.sent();\n            return [4\n            /*yield*/\n            , batchesY.iterator()];\n\n          case 2:\n            itY = _a.sent();\n            allX = [];\n            allY = [];\n            i = 0;\n            _a.label = 3;\n\n          case 3:\n            if (!(i < iterations)) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , itX.next()];\n\n          case 4:\n            batchedXTensor = _a.sent();\n            batchedXPredictionTensor = this.trainingModel.predict(batchedXTensor.value);\n            argMaxX = batchedXPredictionTensor.argMax(1);\n            allX.push(argMaxX);\n            return [4\n            /*yield*/\n            , itY.next()];\n\n          case 5:\n            batchedYTensor = _a.sent();\n            argMaxY = batchedYTensor.value.argMax(1);\n            allY.push(argMaxY); // 3. dispose of all our tensors\n\n            batchedXTensor.value.dispose();\n            batchedXPredictionTensor.dispose();\n            batchedYTensor.value.dispose();\n            _a.label = 6;\n\n          case 6:\n            i++;\n            return [3\n            /*break*/\n            , 3];\n\n          case 7:\n            reference = tf.concat(allY);\n            predictions = tf.concat(allX); // only if we concatenated more than one tensor for preference and reference\n\n            if (iterations !== 1) {\n              for (i = 0; i < allX.length; i++) {\n                allX[i].dispose();\n                allY[i].dispose();\n              }\n            }\n\n            return [2\n            /*return*/\n            , {\n              reference: reference,\n              predictions: predictions\n            }];\n        }\n      });\n    });\n  };\n  /*\n   * optional seed for predictable shuffling of dataset\n   */\n\n\n  TeachableMobileNet.prototype.setSeed = function (seed) {\n    this.seed = seedrandom(seed);\n  };\n\n  return TeachableMobileNet;\n}(custom_mobilenet_1.CustomMobileNet);\n\nexports.TeachableMobileNet = TeachableMobileNet;\n\nfunction createTeachable(metadata, modelOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var mobilenet;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , custom_mobilenet_1.loadTruncatedMobileNet(modelOptions)];\n\n        case 1:\n          mobilenet = _a.sent();\n          return [2\n          /*return*/\n          , new TeachableMobileNet(mobilenet, metadata)];\n      }\n    });\n  });\n}\n\nexports.createTeachable = createTeachable;","map":{"version":3,"sources":["../src/teachable-mobilenet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar tf_1 = require(\"./utils/tf\");\nvar custom_mobilenet_1 = require(\"./custom-mobilenet\");\nvar seedrandom = require(\"seedrandom\");\nvar VALIDATION_FRACTION = 0.15;\n// tslint:disable-next-line:no-any\nvar isTensor = function (c) {\n    return typeof c.dataId === 'object' && c.shape === 'object';\n};\n/**\n * Converts an integer into its one-hot representation and returns\n * the data as a JS Array.\n */\nfunction flatOneHot(label, numClasses) {\n    var labelOneHot = new Array(numClasses).fill(0);\n    labelOneHot[label] = 1;\n    return labelOneHot;\n}\n/**\n * Shuffle an array of Float32Array or Samples using Fisher-Yates algorithm\n * Takes an optional seed value to make shuffling predictable\n */\nfunction fisherYates(array, seed) {\n    var _a;\n    var length = array.length;\n    // need to clone array or we'd be editing original as we goo\n    var shuffled = array.slice();\n    for (var i = (length - 1); i > 0; i -= 1) {\n        var randomIndex = void 0;\n        if (seed) {\n            randomIndex = Math.floor(seed() * (i + 1));\n        }\n        else {\n            randomIndex = Math.floor(Math.random() * (i + 1));\n        }\n        _a = [shuffled[randomIndex], shuffled[i]], shuffled[i] = _a[0], shuffled[randomIndex] = _a[1];\n    }\n    return shuffled;\n}\nvar TeachableMobileNet = /** @class */ (function (_super) {\n    __extends(TeachableMobileNet, _super);\n    function TeachableMobileNet(truncated, metadata) {\n        var _this = _super.call(this, tf.sequential(), metadata) || this;\n        // private __stopTrainingReject: (error: Error) => void;\n        // Number of total samples\n        _this.totalSamples = 0;\n        // Array of all the examples collected\n        _this.examples = [];\n        // the provided model is the truncated mobilenet\n        _this.truncatedModel = truncated;\n        return _this;\n    }\n    Object.defineProperty(TeachableMobileNet.prototype, \"asSequentialModel\", {\n        get: function () {\n            return this.model;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TeachableMobileNet.prototype, \"isTrained\", {\n        /**\n         * has the teachable model been trained?\n         */\n        get: function () {\n            return !!this.model && this.model.layers && this.model.layers.length > 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TeachableMobileNet.prototype, \"isPrepared\", {\n        /**\n         * has the dataset been prepared with all labels and samples processed?\n         */\n        get: function () {\n            return !!this.trainDataset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TeachableMobileNet.prototype, \"numClasses\", {\n        /**\n         * how many classes are in the dataset?\n         */\n        get: function () {\n            return this._metadata.labels.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Add a sample of data under the provided className\n     * @param className the classification this example belongs to\n     * @param sample the image / tensor that belongs in this classification\n     */\n    // public async addExample(className: number, sample: HTMLCanvasElement | tf.Tensor) {\n    TeachableMobileNet.prototype.addExample = function (className, sample) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cap, example, activation;\n            return __generator(this, function (_a) {\n                cap = isTensor(sample) ? sample : tf_1.capture(sample);\n                example = this.truncatedModel.predict(cap);\n                activation = example.dataSync();\n                cap.dispose();\n                example.dispose();\n                // save samples of each class separately\n                this.examples[className].push(activation);\n                // increase our sample counter\n                this.totalSamples++;\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Classify an input image / Tensor with your trained model. Return all results.\n     * @param image the input image / Tensor to classify against your model\n     * @param topK how many of the top results do you want? defautls to 3\n     */\n    TeachableMobileNet.prototype.predict = function (image, flipped) {\n        if (flipped === void 0) { flipped = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!this.model) {\n                    throw new Error('Model has not been trained yet, called train() first');\n                }\n                return [2 /*return*/, _super.prototype.predict.call(this, image, flipped)];\n            });\n        });\n    };\n    /**\n     * Classify an input image / Tensor with your trained model. Return topK results\n     * @param image the input image / Tensor to classify against your model\n     * @param maxPredictions how many of the top results do you want? defautls to 3\n     * @param flipped whether to flip an image\n     */\n    TeachableMobileNet.prototype.predictTopK = function (image, maxPredictions, flipped) {\n        if (maxPredictions === void 0) { maxPredictions = 10; }\n        if (flipped === void 0) { flipped = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!this.model) {\n                    throw new Error('Model has not been trained yet, called train() first');\n                }\n                return [2 /*return*/, _super.prototype.predictTopK.call(this, image, maxPredictions, flipped)];\n            });\n        });\n    };\n    /**\n     * process the current examples provided to calculate labels and format\n     * into proper tf.data.Dataset\n     */\n    TeachableMobileNet.prototype.prepare = function () {\n        for (var classes in this.examples) {\n            if (classes.length === 0) {\n                throw new Error('Add some examples before training');\n            }\n        }\n        var datasets = this.convertToTfDataset();\n        this.trainDataset = datasets.trainDataset;\n        this.validationDataset = datasets.validationDataset;\n    };\n    /**\n     * Process the examples by first shuffling randomly per class, then adding\n     * one-hot labels, then splitting into training/validation datsets, and finally\n     * sorting one last time\n     */\n    TeachableMobileNet.prototype.convertToTfDataset = function () {\n        // first shuffle each class individually\n        // TODO: we could basically replicate this by insterting randomly\n        for (var i = 0; i < this.examples.length; i++) {\n            this.examples[i] = fisherYates(this.examples[i], this.seed);\n        }\n        // then break into validation and test datasets\n        var trainDataset = [];\n        var validationDataset = [];\n        var _loop_1 = function (i) {\n            var y = flatOneHot(i, this_1.numClasses);\n            var classLength = this_1.examples[i].length;\n            var numValidation = Math.ceil(VALIDATION_FRACTION * classLength);\n            var numTrain = classLength - numValidation;\n            var classTrain = this_1.examples[i].slice(0, numTrain).map(function (dataArray) {\n                return { data: dataArray, label: y };\n            });\n            var classValidation = this_1.examples[i].slice(numTrain).map(function (dataArray) {\n                return { data: dataArray, label: y };\n            });\n            trainDataset = trainDataset.concat(classTrain);\n            validationDataset = validationDataset.concat(classValidation);\n        };\n        var this_1 = this;\n        // for each class, add samples to train and validation dataset\n        for (var i = 0; i < this.examples.length; i++) {\n            _loop_1(i);\n        }\n        // finally shuffle both train and validation datasets\n        trainDataset = fisherYates(trainDataset, this.seed);\n        validationDataset = fisherYates(validationDataset, this.seed);\n        var trainX = tf.data.array(trainDataset.map(function (sample) { return sample.data; }));\n        var validationX = tf.data.array(validationDataset.map(function (sample) { return sample.data; }));\n        var trainY = tf.data.array(trainDataset.map(function (sample) { return sample.label; }));\n        var validationY = tf.data.array(validationDataset.map(function (sample) { return sample.label; }));\n        // return tf.data dataset objects\n        return {\n            trainDataset: tf.data.zip({ xs: trainX, ys: trainY }),\n            validationDataset: tf.data.zip({ xs: validationX, ys: validationY })\n        };\n    };\n    /**\n     * Saving `model`'s topology and weights as two files\n     * (`my-model-1.json` and `my-model-1.weights.bin`) as well as\n     * a `metadata.json` file containing metadata such as text labels to be\n     * downloaded from browser.\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     */\n    TeachableMobileNet.prototype.save = function (handlerOrURL, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.model.save(handlerOrURL, config)];\n            });\n        });\n    };\n    /**\n     * Train your data into a new model and join it with mobilenet\n     * @param params the parameters for the model / training\n     * @param callbacks provide callbacks to receive training events\n     */\n    TeachableMobileNet.prototype.train = function (params, callbacks) {\n        if (callbacks === void 0) { callbacks = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var originalOnTrainEnd, numLabels, inputShape, inputSize, varianceScaling, optimizer, trainData, validationData, history, jointModel;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        originalOnTrainEnd = callbacks.onTrainEnd || (function () { });\n                        callbacks.onTrainEnd = function (logs) {\n                            if (_this.__stopTrainingResolve) {\n                                _this.__stopTrainingResolve();\n                                _this.__stopTrainingResolve = null;\n                            }\n                            originalOnTrainEnd(logs);\n                        };\n                        // Rest of trian function\n                        if (!this.isPrepared) {\n                            this.prepare();\n                        }\n                        numLabels = this.getLabels().length;\n                        tfjs_1.util.assert(numLabels === this.numClasses, function () { return \"Can not train, has \" + numLabels + \" labels and \" + _this.numClasses + \" classes\"; });\n                        inputShape = this.truncatedModel.outputs[0].shape.slice(1);\n                        inputSize = tf.util.sizeFromShape(inputShape);\n                        if (this.seed) {\n                            varianceScaling = tf.initializers.varianceScaling({ seed: 3.14 });\n                        }\n                        else {\n                            varianceScaling = tf.initializers.varianceScaling({});\n                        }\n                        this.trainingModel = tf.sequential({\n                            layers: [\n                                tf.layers.dense({\n                                    inputShape: [inputSize],\n                                    units: params.denseUnits,\n                                    activation: 'relu',\n                                    kernelInitializer: varianceScaling,\n                                    useBias: true\n                                }),\n                                tf.layers.dense({\n                                    kernelInitializer: varianceScaling,\n                                    useBias: false,\n                                    activation: 'softmax',\n                                    units: this.numClasses\n                                })\n                            ]\n                        });\n                        optimizer = tf.train.adam(params.learningRate);\n                        // const optimizer = tf.train.rmsprop(params.learningRate);\n                        this.trainingModel.compile({\n                            optimizer: optimizer,\n                            // loss: 'binaryCrossentropy',\n                            loss: 'categoricalCrossentropy',\n                            metrics: ['accuracy']\n                        });\n                        if (!(params.batchSize > 0)) {\n                            throw new Error(\"Batch size is 0 or NaN. Please choose a non-zero fraction\");\n                        }\n                        trainData = this.trainDataset.batch(params.batchSize);\n                        validationData = this.validationDataset.batch(params.batchSize);\n                        return [4 /*yield*/, this.trainingModel.fitDataset(trainData, {\n                                epochs: params.epochs,\n                                validationData: validationData,\n                                callbacks: callbacks\n                            })];\n                    case 1:\n                        history = _a.sent();\n                        jointModel = tf.sequential();\n                        jointModel.add(this.truncatedModel);\n                        jointModel.add(this.trainingModel);\n                        this.model = jointModel;\n                        optimizer.dispose(); // cleanup of memory\n                        return [2 /*return*/, this.model];\n                }\n            });\n        });\n    };\n    /*\n     * Setup the exampls array to hold samples per class\n     */\n    TeachableMobileNet.prototype.prepareDataset = function () {\n        for (var i = 0; i < this.numClasses; i++) {\n            this.examples[i] = [];\n        }\n    };\n    TeachableMobileNet.prototype.setLabel = function (index, label) {\n        this._metadata.labels[index] = label;\n    };\n    TeachableMobileNet.prototype.setLabels = function (labels) {\n        this._metadata.labels = labels;\n        this.prepareDataset();\n    };\n    TeachableMobileNet.prototype.getLabel = function (index) {\n        return this._metadata.labels[index];\n    };\n    TeachableMobileNet.prototype.getLabels = function () {\n        return this._metadata.labels;\n    };\n    TeachableMobileNet.prototype.setName = function (name) {\n        this._metadata.modelName = name;\n    };\n    TeachableMobileNet.prototype.getName = function () {\n        return this._metadata.modelName;\n    };\n    TeachableMobileNet.prototype.stopTraining = function () {\n        var _this = this;\n        var promise = new Promise(function (resolve, reject) {\n            _this.trainingModel.stopTraining = true;\n            _this.__stopTrainingResolve = resolve;\n            // this.__stopTrainingReject = reject;\n        });\n        return promise;\n    };\n    TeachableMobileNet.prototype.dispose = function () {\n        this.trainingModel.dispose();\n        _super.prototype.dispose.call(this);\n    };\n    /*\n     * Calculate each class accuracy using the validation dataset\n     */\n    TeachableMobileNet.prototype.calculateAccuracyPerClass = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var validationXs, validationYs, batchSize, iterations, batchesX, batchesY, itX, itY, allX, allY, i, batchedXTensor, batchedXPredictionTensor, argMaxX, batchedYTensor, argMaxY, reference, predictions, i;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        validationXs = this.validationDataset.mapAsync(function (dataset) { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                return [2 /*return*/, dataset.xs];\n                            });\n                        }); });\n                        validationYs = this.validationDataset.mapAsync(function (dataset) { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                return [2 /*return*/, dataset.ys];\n                            });\n                        }); });\n                        batchSize = Math.min(validationYs.size, 32);\n                        iterations = Math.ceil(validationYs.size / batchSize);\n                        batchesX = validationXs.batch(batchSize);\n                        batchesY = validationYs.batch(batchSize);\n                        return [4 /*yield*/, batchesX.iterator()];\n                    case 1:\n                        itX = _a.sent();\n                        return [4 /*yield*/, batchesY.iterator()];\n                    case 2:\n                        itY = _a.sent();\n                        allX = [];\n                        allY = [];\n                        i = 0;\n                        _a.label = 3;\n                    case 3:\n                        if (!(i < iterations)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, itX.next()];\n                    case 4:\n                        batchedXTensor = _a.sent();\n                        batchedXPredictionTensor = this.trainingModel.predict(batchedXTensor.value);\n                        argMaxX = batchedXPredictionTensor.argMax(1);\n                        allX.push(argMaxX);\n                        return [4 /*yield*/, itY.next()];\n                    case 5:\n                        batchedYTensor = _a.sent();\n                        argMaxY = batchedYTensor.value.argMax(1);\n                        allY.push(argMaxY);\n                        // 3. dispose of all our tensors\n                        batchedXTensor.value.dispose();\n                        batchedXPredictionTensor.dispose();\n                        batchedYTensor.value.dispose();\n                        _a.label = 6;\n                    case 6:\n                        i++;\n                        return [3 /*break*/, 3];\n                    case 7:\n                        reference = tf.concat(allY);\n                        predictions = tf.concat(allX);\n                        // only if we concatenated more than one tensor for preference and reference\n                        if (iterations !== 1) {\n                            for (i = 0; i < allX.length; i++) {\n                                allX[i].dispose();\n                                allY[i].dispose();\n                            }\n                        }\n                        return [2 /*return*/, { reference: reference, predictions: predictions }];\n                }\n            });\n        });\n    };\n    /*\n     * optional seed for predictable shuffling of dataset\n     */\n    TeachableMobileNet.prototype.setSeed = function (seed) {\n        this.seed = seedrandom(seed);\n    };\n    return TeachableMobileNet;\n}(custom_mobilenet_1.CustomMobileNet));\nexports.TeachableMobileNet = TeachableMobileNet;\nfunction createTeachable(metadata, modelOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n        var mobilenet;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, custom_mobilenet_1.loadTruncatedMobileNet(modelOptions)];\n                case 1:\n                    mobilenet = _a.sent();\n                    return [2 /*return*/, new TeachableMobileNet(mobilenet, metadata)];\n            }\n        });\n    });\n}\nexports.createTeachable = createTeachable;\n//# sourceMappingURL=teachable-mobilenet.js.map"]},"metadata":{},"sourceType":"script"}